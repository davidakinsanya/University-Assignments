buildscript {
  Properties constants = new Properties()
  file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

  ext {
    corda_release_group = constants.getProperty("cordaReleaseGroup")
    corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
    corda_release_version = constants.getProperty("cordaVersion")
    corda_core_release_version = constants.getProperty("cordaCoreVersion")
    corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
    kotlin_version = constants.getProperty("kotlinVersion")
    ktor_version = constants.getProperty("ktorVersion")
    junit_version = constants.getProperty("junitVersion")
    quasar_version = constants.getProperty("quasarVersion")
    log4j_version = constants.getProperty("log4jVersion")
    slf4j_version = constants.getProperty("slf4jVersion")
    corda_platform_version = constants.getProperty("platformVersion").toInteger()
  }

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://software.r3.com/artifactory/corda-releases' }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    classpath "org.jetbrains.kotlin:kotlin-reflect:1.4.0"
  }
}

allprojects {
  apply from: "${rootProject.projectDir}/repositories.gradle"
  apply plugin: 'kotlin'
  apply plugin: 'java'

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://software.r3.com/artifactory/corda' }
    maven { url 'https://jitpack.io' }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
      languageVersion = "1.3"
      apiVersion = "1.3"
      jvmTarget = "1.8"
      javaParameters = true   // Useful for reflection.
    }
  }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
  main {
    resources {
      srcDir rootProject.file("config/dev")
    }
  }
}

dependencies {

  cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
  cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
  cordaRuntime "$corda_release_group:corda:$corda_release_version"


  cordapp project(":workflows")
  cordapp project(":contracts")

  cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
  cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
  cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

task deployDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: ['jar']) {
  dockerImage = "corda/corda-zulu-java1.8-4.8.5"

  nodeDefaults {
    projectCordapp {
      deploy = false
    }
    cordapp project(':contracts')
    cordapp project(':workflows')
    runSchemaMigration = true
  }
  node {
    name "O=Notary,L=London,C=GB"
    notary = [validating: false]
    p2pPort 10002
    rpcSettings {
      address("localhost:10003")
      adminAddress("localhost:10043")
    }
  }
  node {
    name "O=PartyA,L=London,C=GB"
    p2pPort 10005
    rpcSettings {
      address("localhost:10006")
      adminAddress("localhost:10046")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
  }
  node {
    name "O=PartyB,L=New York,C=US"
    p2pPort 10008
    rpcSettings {
      address("localhost:10009")
      adminAddress("localhost:10049")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
  }
}